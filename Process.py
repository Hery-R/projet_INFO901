"""
Process.py - Processus principal du syst√®me distribu√© refactoris√©
Auteur: RASOAMIARAMANANA Hery ny aina
Auteur: ROUSSEAU Maxime

Ce module impl√©mente un processus dans un syst√®me distribu√© avec :
- D√©l√©gation de la communication au middleware Com
- Algorithme en anneau avec jeton pour la section critique
- Logique m√©tier s√©par√©e de la communication
"""

from threading import Thread
from time import sleep

from BroadcastMessage import BroadcastMessage
from MessageTo import MessageTo
from CriticalSectionMessage import TokenMessage
from Com import Com
from pyeventbus3.pyeventbus3 import *


class Process(Thread):
    """
    Processus dans un syst√®me distribu√© refactoris√©.

    Responsabilit√©s :
    - Logique m√©tier du processus
    - Gestion de l'√©tat de la section critique
    - D√©l√©gation de la communication au middleware Com
    """

    def __init__(self, name=None, npProcess=None):
        """
        Initialise un nouveau processus avec num√©rotation automatique.

        Le processus se connecte au communicateur qui lui attribue
        automatiquement un num√©ro unique cons√©cutif.

        Args:
            name (str, optional): Nom du processus. Si None, g√©n√©r√© automatiquement
            npProcess (int, optional): Nombre total de processus. Si None, d√©termin√© dynamiquement
        """
        Thread.__init__(self)

        # === CONNEXION ET NUM√âROTATION AUTOMATIQUE ===
        # Le middleware Com attribue automatiquement un ID unique et cons√©cutif
        self.com = Com(process_name=name, total_processes=npProcess)

        # Configuration de base du processus (r√©cup√©r√©e depuis Com)
        self.npProcess = npProcess if npProcess is not None else self.com._get_total_processes()
        # ID attribu√© automatiquement par Com
        self.myId = self.com.process_id
        # Nom du processus (g√©n√©r√© si n√©cessaire)
        self.myProcessName = self.com.process_name
        self.setName("MainThread-" + self.myProcessName)  # Nom du thread

        # Note : Process ne s'enregistre plus au PyBus
        # Les messages sont maintenant g√©r√©s via la mailbox dans Com

        # √âtat du processus
        self.alive = True                            # Contr√¥le de la boucle principale
        # Liste des threads de section critique actifs
        self.active_cs_threads = []

        # Partager l'√©tat du processus avec Com (d√©j√† cr√©√© plus haut)
        self.com.process_alive = lambda: self.alive

        # D√©marrer le thread du processus
        self.start()

    # === TRAITEMENT DES MESSAGES VIA MAILBOX ===

    def process_mailbox_messages(self):
        """
        Traite les messages disponibles dans la mailbox.

        Cette m√©thode remplace les anciens handlers PyBus.
        Elle r√©cup√®re les messages de la bo√Æte aux lettres et les traite.
        """
        while self.com.has_messages() and self.alive:
            message = self.com.get_message()
            if message:
                self._handle_message(message)

    def _handle_message(self, message):
        """
        Traite un message sp√©cifique selon son type.

        Args:
            message (LamportMessage): Message √† traiter
        """
        # Mise √† jour de l'horloge de Lamport
        old_clock, new_clock = self.com.update_clock_on_receive(
            message.getTimestamp())

        if isinstance(message, TokenMessage):
            self._handle_token_message(message)
        elif isinstance(message, BroadcastMessage):
            self._handle_broadcast_message(message)
        elif isinstance(message, MessageTo):
            self._handle_directed_message(message)
        else:
            # Message g√©n√©rique
            print(
                f"{self.name} processed generic message: {message.getPayload()} (clock: {old_clock} ‚Üí {new_clock})")

    def _handle_token_message(self, message):
        """Traite un message de jeton."""
        if message.getToProcessId() == self.myId and self.alive:
            should_pass_immediately = self.com.receive_token(
                message.getFromProcessId(),
                message.getTimestamp()
            )

            if should_pass_immediately and self.alive:
                from time import sleep
                sleep(0.1)  # Petit d√©lai avant de passer le jeton

    def _handle_broadcast_message(self, message):
        """Traite un message de diffusion."""
        old_clock, new_clock = self.com.update_clock_on_receive(
            message.getTimestamp())
        print(
            f"{self.name} received broadcast: {message.getPayload()} (local clock: {new_clock})")

    def _handle_directed_message(self, message):
        """Traite un message dirig√©."""
        if message.getTo() == self.myId:
            old_clock, new_clock = self.com.update_clock_on_receive(
                message.getTimestamp())
            print(
                f"{self.name} received directed message: {message.getPayload()} (clock: {new_clock})")

    def broadcast(self, payload):
        """
        Diffuse un message √† tous les processus du syst√®me.

        Args:
            payload (str): Contenu √† diffuser
        """
        # D√©l√©guer au middleware Com
        self.com.broadcast(payload)

    def sendTo(self, payload, to):
        """
        Envoie un message √† un processus sp√©cifique.

        Args:
            payload (str): Contenu du message
            to (int): ID du processus destinataire
        """
        # D√©l√©guer au middleware Com
        self.com.sendTo(payload, to)

    # === ALGORITHME EN ANNEAU AVEC JETON POUR SECTION CRITIQUE ===

    def request_critical_section(self):
        """Demande d'acc√®s √† la section critique via Com"""
        self.com.requestSC()

    def exit_critical_section(self):
        """Sortie de la section critique via Com"""
        self.com.releaseSC()

    # === NOUVELLES M√âTHODES DU TP ===

    def synchronize(self):
        """Synchronisation avec tous les autres processus"""
        self.com.synchronize()

    def broadcast_sync(self, payload):
        """Broadcast synchrone - ce processus est l'√©metteur"""
        self.com.broadcastSyncObject(payload, self.myId)

    def wait_broadcast_sync(self, from_process_id, payload):
        """Attendre un broadcast synchrone d'un processus sp√©cifique"""
        self.com.broadcastSyncObject(payload, from_process_id)

    def send_to_sync(self, payload, destination_id):
        """Envoi synchrone √† un processus"""
        self.com.sendToSyncObject(payload, destination_id)

    def receive_from_sync(self, from_process_id):
        """R√©ception synchrone depuis un processus"""
        return self.com.recevFromSyncObject(from_process_id)

    # Les handlers PyBus ont √©t√© remplac√©s par le traitement via mailbox

    def run(self):
        loop = 0
        while self.alive:
            # Traiter les messages en attente dans la mailbox
            self.process_mailbox_messages()

            # Utilisation du middleware Com pour incr√©menter l'horloge
            current_clock = self.com.incclock()

            # R√©cup√©rer l'√©tat de la section critique depuis Com
            cs_status = self.com.get_cs_status()
            token_status = "WITH_TOKEN" if cs_status['has_token'] else "NO_TOKEN"
            wants_status = "WANTS_CS" if cs_status['wants_cs'] else "NO_REQUEST"

            print(
                f"{self.name} Loop: {loop} (clock {current_clock}) - State: {cs_status['state'].value} - {token_status} - {wants_status}")

            # Test des m√©thodes de communication synchrone avec barri√®re
            if loop == 2:
                print(f"üß™ {self.name} testing synchronous communication...")
                if self.myId == 0:  # P0 est l'√©metteur
                    print(f"üì¢ {self.name} testing broadcast sync")
                    self.broadcast_sync("Test broadcast message")
                else:  # P1 et P2 participent au broadcast sync
                    print(f"üëÇ {self.name} participating in broadcast sync test")
                    # P1 et P2 attendent de recevoir le broadcast de P0
                    self.wait_broadcast_sync(0, "Test broadcast message")

            # Test de la section critique avec jeton : demander p√©riodiquement
            # D√©calage pour √©viter les demandes simultan√©es
            if loop % 7 == self.myId and not cs_status['wants_cs']:
                print(f"üéØ {self.name} requesting critical section...")
                # Attention: requestSC() est maintenant BLOQUANT selon les sp√©cifications
                # Il faudra le lancer dans un thread s√©par√© pour √©viter de bloquer la boucle principale
                import threading

                def request_cs():
                    try:
                        if not self.alive:  # V√©rifier si le processus est encore actif
                            return
                        self.request_critical_section()  # BLOQUANT jusqu'√† obtention
                        if not self.alive:  # V√©rifier √† nouveau apr√®s l'attente
                            return
                        # Simuler du travail en section critique
                        print(
                            f"{self.name} *** WORKING IN CRITICAL SECTION ***")
                        sleep(1.0)  # Travail en section critique
                        self.exit_critical_section()
                    except Exception as e:
                        print(
                            f"‚ùå {self.name} error in critical section: {e}")

                cs_thread = threading.Thread(
                    target=request_cs, name=f"CS-{self.name}")
                cs_thread.daemon = True  # Thread daemon s'arr√™te avec le programme principal
                cs_thread.start()
                self.active_cs_threads.append(cs_thread)

            sleep(0.8)
            loop += 1
        print(f"{self.name} stopped")

    def stop(self):
        self.alive = False
        # Notifier tous les threads en attente de section critique pour qu'ils se terminent
        with self.com.cs_condition:
            self.com.cs_condition.notify_all()

    def waitStopped(self):
        self.join()
        # Attendre que tous les threads de section critique se terminent
        for thread in self.active_cs_threads:
            if thread.is_alive():
                # Timeout pour √©viter d'attendre ind√©finiment
                thread.join(timeout=1.0)
