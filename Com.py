"""
Com.py - Classe middleware pour la communication dans le syst√®me distribu√©
Auteur: Refactorisation du code de RASOAMIARAMANANA Hery ny aina

Cette classe centralise toute la logique de communication qui √©tait
pr√©c√©demment dans Process.py, pour une meilleure s√©paration des responsabilit√©s.
"""

from threading import Lock
from pyeventbus3.pyeventbus3 import *
from BroadcastMessage import BroadcastMessage
from MessageTo import MessageTo

class Com:
    """
    Middleware de communication pour syst√®me distribu√©.
    
    Responsabilit√©s :
    - Gestion de l'horloge logique de Lamport avec protection thread-safe
    - Services de communication (broadcast, messages dirig√©s)
    - Gestion des sections critiques distribu√©es
    - Synchronisation globale
    """
    
    def __init__(self, process_id, process_name, total_processes):
        """
        Initialise le middleware de communication.
        
        Args:
            process_id (int): ID unique du processus propri√©taire
            process_name (str): Nom lisible du processus (ex: "P0", "P1")
            total_processes (int): Nombre total de processus dans le syst√®me
        """
        # Configuration de base
        self.process_id = process_id
        self.process_name = process_name
        self.total_processes = total_processes
        
        # Horloge logique de Lamport avec protection thread-safe
        self.lamport_clock = 0
        self.lock = Lock()
        
        # Note : Com ne s'enregistre PAS au bus d'√©v√©nements
        # Seuls les Process doivent s'y enregistrer pour recevoir les messages
        
        print(f"üîß Com middleware initialized for {process_name} (ID: {process_id})")
    
    def incclock(self):
        """
        Incr√©mente l'horloge de Lamport pour un √©v√©nement local.
        
        Cette m√©thode doit √™tre appel√©e par Process avant chaque action locale
        qui g√©n√®re un message (envoi, broadcast, etc.).
        
        Returns:
            int: Nouvelle valeur de l'horloge apr√®s incr√©mentation
        """
        with self.lock:
            self.lamport_clock += 1
            return self.lamport_clock
    
    def getclock(self):
        """
        Retourne la valeur actuelle de l'horloge de Lamport.
        
        Returns:
            int: Valeur actuelle de l'horloge logique
        """
        with self.lock:
            return self.lamport_clock
    
    def update_clock_on_receive(self, received_timestamp):
        """
        Met √† jour l'horloge selon les r√®gles de Lamport √† la r√©ception d'un message.
        
        R√®gle : clock = max(clock_local, clock_message) + 1
        
        Args:
            received_timestamp (int): Timestamp du message re√ßu
            
        Returns:
            tuple: (ancienne_horloge, nouvelle_horloge)
        """
        with self.lock:
            old_clock = self.lamport_clock
            self.lamport_clock = max(self.lamport_clock, received_timestamp) + 1
            return (old_clock, self.lamport_clock)
    
    def get_process_info(self):
        """
        Retourne les informations du processus propri√©taire.
        
        Returns:
            dict: Informations du processus (id, name, total)
        """
        return {
            'id': self.process_id,
            'name': self.process_name,
            'total_processes': self.total_processes
        }
    
    # === M√âTHODES DE COMMUNICATION ===
    
    def broadcast(self, payload):
        """
        Diffuse un message √† tous les processus du syst√®me.
        
        Cette m√©thode encapsule l'envoi de messages de diffusion en g√©rant
        automatiquement l'incr√©mentation de l'horloge de Lamport.
        
        Args:
            payload (str): Contenu √† diffuser √† tous les processus
        """
        # Incr√©menter l'horloge pour cet √©v√©nement local d'envoi
        current_clock = self.incclock()
        
        # Cr√©er et envoyer le message de diffusion
        msg = BroadcastMessage(current_clock, payload)
        print(f"üì¢ {self.process_name} broadcast: {payload} with timestamp {current_clock}")
        PyBus.Instance().post(msg)
    
    def sendTo(self, payload, destination_id):
        """
        Envoie un message √† un processus sp√©cifique.
        
        Cette m√©thode encapsule l'envoi de messages dirig√©s en g√©rant
        automatiquement l'incr√©mentation de l'horloge de Lamport.
        
        Args:
            payload (str): Contenu du message
            destination_id (int): ID du processus destinataire
        """
        # Incr√©menter l'horloge pour cet √©v√©nement local d'envoi
        current_clock = self.incclock()
        
        # Cr√©er et envoyer le message dirig√©
        msg = MessageTo(current_clock, payload, destination_id)
        print(f"{self.process_name} sendTo P{destination_id}: {payload} with timestamp {current_clock}")
        PyBus.Instance().post(msg)
